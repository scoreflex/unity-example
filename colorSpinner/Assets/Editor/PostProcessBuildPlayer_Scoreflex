#!/usr/bin/python -B
import sys
import mod_pbxproj
import shutil
from mod_pbxproj import XcodeProject
from subprocess import call
projectDir = sys.argv[1]
scoreflexDir = projectDir + "/scoreflex"
try:
	shutil.copytree("Assets/Plugins/Scoreflex/iOS", scoreflexDir)
	call(["unzip", "-o", scoreflexDir + "/ScoreflexResources.bundle.zip", "-d", scoreflexDir])
except OSError:
	print 'Scoreflex data already copied.'
project = XcodeProject.Load(sys.argv[1] + "/Unity-iPhone.xcodeproj/project.pbxproj")
group = project.get_or_create_group("Scoreflex")
project.add_file(scoreflexDir + "/NativeBridge.m", parent=group)
project.add_file(scoreflexDir + "/libScoreflex.a", parent=group)
project.add_file(scoreflexDir + "/ScoreflexResources.bundle", parent=group)
project.add_file(scoreflexDir + "/Scoreflex.h", parent=group)
project.add_file(scoreflexDir + "/SXResponse.h", parent=group)
project.add_file(scoreflexDir + "/SXview.h", parent=group)
project.add_file('System/Library/Frameworks/MobileCoreServices.framework', tree='SDKROOT')
project.add_file('System/Library/Frameworks/SystemConfiguration.framework', tree='SDKROOT')
project.save()

appControllerFilename = projectDir + "/Classes/UnityAppController.mm"
with open(appControllerFilename) as _code:
        appControllerSource=_code.read()

mustInjectHeader = appControllerSource.find("Scoreflex/Scoreflex.h") == -1
if mustInjectHeader:
	payload ="#import \"Scoreflex/Scoreflex.h\"\n"
	appControllerSource = payload + appControllerSource

mustInjectHandleURL = appControllerSource.find("[Scoreflex handleURL:") == -1
if mustInjectHandleURL:
	queryString = "- (BOOL)application:(UIApplication*)application openURL:(NSURL*)url sourceApplication:(NSString*)sourceApplication annotation:(id)annotation"
	injectionPoint = appControllerSource.index(queryString)
	while appControllerSource[injectionPoint - 1] != '{':
		injectionPoint = injectionPoint + 1
	payload = "\t[Scoreflex handleURL:url sourceApplication:sourceApplication annotation:annotation];\n\n"
	appControllerSource = appControllerSource[:injectionPoint] + payload + appControllerSource[injectionPoint:]

mustInjectHandleLaunch = appControllerSource.find("[Scoreflex handleApplicationLaunchWithOption:") == -1
if mustInjectHandleLaunch:
	queryString = "- (BOOL)application:(UIApplication*)application didFinishLaunchingWithOptions:(NSDictionary*)launchOptions";
	injectionPoint = appControllerSource.index(queryString)
	while appControllerSource[injectionPoint - 1] != '{':
		injectionPoint = injectionPoint + 1
	payload = "\n\tif([Scoreflex handleApplicationLaunchWithOption:launchOptions])\n\t{\n\t\t[application cancelAllLocalNotifications];\n\t}\n\n"
	appControllerSource = appControllerSource[:injectionPoint] + payload + appControllerSource[injectionPoint:]

mustInjectHandleNotification = appControllerSource.find("[Scoreflex handleNotification:") == -1
if mustInjectHandleNotification:
	queryString = "- (void)application:(UIApplication*)application didReceiveRemoteNotification:(NSDictionary*)userInfo"
	injectionPoint = appControllerSource.index(queryString)
	while appControllerSource[injectionPoint - 1] != '{':
		injectionPoint = injectionPoint + 1
	payload = "\n\tif([application applicationState] == UIApplicationStateInactive)\n\t{\n\t\tif ([Scoreflex handleNotification:userInfo])\n\t\t{\n\t\t\t[application cancelAllLocalNotifications];\n\t\t}\n\t}\n"
	appControllerSource = appControllerSource[:injectionPoint] + payload + appControllerSource[injectionPoint:]

with open(appControllerFilename, "w") as _code:
	_code.write(appControllerSource)
